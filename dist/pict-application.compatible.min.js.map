{"version":3,"sources":["pict-application.compatible.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","source/Pict-Application.js"],"names":["_callSuper","t","o","e","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","constructor","apply","self","call","_typeof","TypeError","_assertThisInitialized","ReferenceError","Boolean","prototype","valueOf","Object","setPrototypeOf","getPrototypeOf","bind","__proto__","_inherits","subClass","superClass","create","value","writable","configurable","defineProperty","_setPrototypeOf","p","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","obj","_toPrimitive","String","r","Symbol","toPrimitive","Number","iterator","f","exports","module","define","amd","window","global","this","PictApplication","n","c","require","u","a","Error","code","FableServiceProviderBase","pFable","pOptions","pServiceHash","isFable","connectFable","fable","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","CoreServiceProviderBase","libFableServiceBase","defaultPictSettings","Name","MainViewportViewIdentifier","MainViewportRenderableHash","MainViewportDestinationAddress","MainViewportDefaultDataAddress","AutoSolveAfterInitialize","AutoRenderMainViewportViewAfterInitialize","Manifests","IdentifierAddressPrefix","_libFableServiceBase","_this","assign","JSON","parse","stringify","pict","AppData","initializeTimestamp","lastSolvedTimestamp","lastMarshalFromViewsTimestamp","lastMarshalToViewsTimestamp","tmpManifestKeys","keys","tmpManifestKey","instantiateServiceProvider","LogNoisiness","trace","fCallback","onPreSolve","onBeforeSolve","onSolve","tmpLoadedProviders","providers","tmpProvidersToSolve","tmpProvider","AutoSolveWithApp","push","sort","b","AutoSolveOrdinal","solve","tmpLoadedViews","views","tmpViewsToSolve","tmpView","AutoInitialize","AutoInitializeOrdinal","onAfterSolve","getTimeStamp","_this2","tmpAnticipate","instantiateServiceProviderWithoutRegistration","anticipate","onBeforeSolveAsync","solveAsync","onSolveAsync","onAfterSolveAsync","wait","pError","onBeforeInitialize","onInitialize","LogControlFlow","warn","tmpProvidersToInitialize","initialize","tmpViewsToInitialize","onAfterInitialize","render","fCallBack","_this3","onBeforeInitializeAsync","onInitializeAsync","initializeAsync","onAfterInitializeAsync","renderMainViewportAsync","onBeforeMarshalFromViews","onMarshalFromViews","tmpViewsToMarshalFromViews","marshalFromView","onAfterMarshalFromViews","_this4","onBeforeMarshalFromViewsAsync","marshalFromViewAsync","onMarshalFromViewsAsync","onAfterMarshalFromViewsAsync","onBeforeMarshalToViews","onMarshalToViews","tmpViewsToMarshalToViews","marshalToView","onAfterMarshalToViews","_this5","onBeforeMarshalToViewsAsync","marshalToViewAsync","onMarshalToViewsAsync","onAfterMarshalToViewsAsync","pViewIdentifier","pRenderableHash","pRenderDestinationAddress","pTemplateDataAddress","tmpViewIdentifier","tmpRenderableHash","tmpRenderDestinationAddress","tmpTemplateDataAddress","PictView","error","renderAsync"],"mappings":"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","file":"pict-application.compatible.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictApplication = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{}],2:[function(require,module,exports){\nconst libFableServiceBase = require('fable-serviceproviderbase')\n\nconst defaultPictSettings = (\n\t{\n\t\tName: 'DefaultPictApplication',\n\n\t\t// The main \"viewport\" is the view that is used to host our application\n\t\tMainViewportViewIdentifier: 'Default-View',\n\t\tMainViewportRenderableHash: false,\n\t\tMainViewportDestinationAddress: false,\n\t\tMainViewportDefaultDataAddress: false,\n\n\t\t// Whether or not we should automatically render the main viewport after we initialize the pict application\n\t\tAutoSolveAfterInitialize: true,\n\t\tAutoRenderMainViewportViewAfterInitialize: true,\n\n\t\tManifests: {},\n\t\t// The prefix to prepend on all template destination hashes\n\t\tIdentifierAddressPrefix: 'PICT-'\n\t});\n\nclass PictApplication extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tthis.serviceType = 'PictApplication';\n\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict state\n\t\tthis.AppData = this.fable.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastMarshalFromViewsTimestamp = false;\n\t\tthis.lastMarshalToViewsTimestamp = false;\n\n\t\t// Load all the manifests for the application\n\t\tlet tmpManifestKeys = Object.keys(this.options.Manifests);\n\t\tif (tmpManifestKeys.length > 0)\n\t\t{\n\t\t\tfor (let i = 0; i < tmpManifestKeys.length; i++)\n\t\t\t{\n\t\t\t\t// Load each manifest\n\t\t\t\tlet tmpManifestKey = tmpManifestKeys[i];\n\t\t\t\tthis.fable.instantiateServiceProvider('Manifest', this.options.Manifests[tmpManifestKey], tmpManifestKey);\n\t\t\t}\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Solve All Views                          */\n\t/* -------------------------------------------------------------------------- */\n\tonPreSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onPreSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonPreSolveAsync(fCallback)\n\t{\n\t\tthis.onPreSolve();\n\t\treturn fCallback();\n\t}\n\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} executing solve() function...`)\n\t\t}\n\n\t\t// Walk through any loaded providers and solve them as well.\n\t\tlet tmpLoadedProviders = Object.keys(this.pict.providers);\n\t\tlet tmpProvidersToSolve = [];\n\t\tfor (let i = 0; i < tmpLoadedProviders.length; i++)\n\t\t{\n\t\t\tlet tmpProvider = this.pict.providers[tmpLoadedProviders[i]];\n\t\t\tif (tmpProvider.options.AutoSolveWithApp)\n\t\t\t{\n\t\t\t\ttmpProvidersToSolve.push(tmpProvider);\n\t\t\t}\n\t\t}\n\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\ttmpProvidersToSolve.sort((a, b) => { return a.options.AutoSolveOrdinal - b.options.AutoSolveOrdinal; });\n\t\tfor (let i = 0; i < tmpProvidersToSolve.length; i++)\n\t\t{\n\t\t\ttmpProvidersToSolve[i].solve(tmpProvidersToSolve[i]);\n\t\t}\n\n\t\tthis.onBeforeSolve();\n\t\t// Now walk through any loaded views and initialize them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToSolve = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\tif (tmpView.options.AutoInitialize)\n\t\t\t{\n\t\t\t\ttmpViewsToSolve.push(tmpView);\n\t\t\t}\n\t\t}\n\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\ttmpViewsToSolve.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\tfor (let i = 0; i < tmpViewsToSolve.length; i++)\n\t\t{\n\t\t\ttmpViewsToSolve[i].solve();\n\t\t}\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.fable.log.getTimeStamp();\n\t\treturn true;\n\t}\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.fable.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\n\t\t// Walk through any loaded providers and solve them as well.\n\t\tlet tmpLoadedProviders = Object.keys(this.pict.providers);\n\t\tlet tmpProvidersToSolve = [];\n\t\tfor (let i = 0; i < tmpLoadedProviders.length; i++)\n\t\t{\n\t\t\tlet tmpProvider = this.pict.providers[tmpLoadedProviders[i]];\n\t\t\tif (tmpProvider.options.AutoSolveWithApp)\n\t\t\t{\n\t\t\t\ttmpProvidersToSolve.push(tmpProvider);\n\t\t\t}\n\t\t}\n\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\ttmpProvidersToSolve.sort((a, b) => { return a.options.AutoSolveOrdinal - b.options.AutoSolveOrdinal; });\n\t\tfor (let i = 0; i < tmpProvidersToSolve.length; i++)\n\t\t{\n\t\t\ttmpAnticipate.anticipate(tmpProvidersToSolve[i].solveAsync.bind(tmpProvidersToSolve[i]));\n\t\t}\n\n\t\t// Walk through any loaded views and solve them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToSolve = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\tif (tmpView.options.AutoSolveWithApp)\n\t\t\t{\n\t\t\t\ttmpViewsToSolve.push(tmpView);\n\t\t\t}\n\t\t}\n\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\ttmpViewsToSolve.sort((a, b) => { return a.options.AutoSolveOrdinal - b.options.AutoSolveOrdinal; });\n\t\tfor (let i = 0; i < tmpViewsToSolve.length; i++)\n\t\t{\n\t\t\ttmpAnticipate.anticipate(tmpViewsToSolve[i].solveAsync.bind(tmpViewsToSolve[i]));\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.fable.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Initialize Application                   */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\n\t\t\t// Walk through any loaded providers and initialize them as well.\n\t\t\tlet tmpLoadedProviders = Object.keys(this.pict.providers);\n\t\t\tlet tmpProvidersToInitialize = [];\n\t\t\tfor (let i = 0; i < tmpLoadedProviders.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpProvider = this.pict.providers[tmpLoadedProviders[i]];\n\t\t\t\tif (tmpProvider.options.AutoInitialize)\n\t\t\t\t{\n\t\t\t\t\ttmpProvidersToInitialize.push(tmpProvider);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\t\ttmpProvidersToInitialize.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\t\tfor (let i = 0; i < tmpProvidersToInitialize.length; i++)\n\t\t\t{\n\t\t\t\ttmpProvidersToInitialize[i].initialize();\n\t\t\t}\n\n\t\t\t// Now walk through any loaded views and initialize them as well.\n\t\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\t\tlet tmpViewsToInitialize = [];\n\t\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\t\tif (tmpView.options.AutoInitialize)\n\t\t\t\t{\n\t\t\t\t\ttmpViewsToInitialize.push(tmpView);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\t\ttmpViewsToInitialize.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\t\tfor (let i = 0; i < tmpViewsToInitialize.length; i++)\n\t\t\t{\n\t\t\t\ttmpViewsToInitialize[i].initialize();\n\t\t\t}\n\n\t\t\tthis.onAfterInitialize();\n\t\t\tif (this.options.AutoSolveAfterInitialize)\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} auto solving after initialization...`);\n\t\t\t\t}\n\t\t\t\t// Solve the template synchronously\n\t\t\t\tthis.solve();\n\t\t\t}\n\t\t\t// Now check and see if we should automatically render as well\n\t\t\tif (this.options.AutoRenderMainViewportViewAfterInitialize)\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} auto rendering after initialization...`);\n\t\t\t\t}\n\t\t\t\t// Render the template synchronously\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\tthis.initializeTimestamp = this.fable.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallBack)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.fable.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 3)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\n\t\t\t// Walk through any loaded providers and solve them as well.\n\t\t\tlet tmpLoadedProviders = Object.keys(this.pict.providers);\n\t\t\tlet tmpProvidersToInitialize = [];\n\t\t\tfor (let i = 0; i < tmpLoadedProviders.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpProvider = this.pict.providers[tmpLoadedProviders[i]];\n\t\t\t\tif (tmpProvider.options.AutoInitialize)\n\t\t\t\t{\n\t\t\t\t\ttmpProvidersToInitialize.push(tmpProvider);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\t\ttmpProvidersToInitialize.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\t\tfor (let i = 0; i < tmpProvidersToInitialize.length; i++)\n\t\t\t{\n\t\t\t\ttmpAnticipate.anticipate(tmpProvidersToInitialize[i].initializeAsync.bind(tmpProvidersToInitialize[i]));\n\t\t\t}\n\n\t\t\t// Now walk through any loaded views and initialize them as well.\n\t\t\t// TODO: Some optimization cleverness could be gained by grouping them into a parallelized async operation, by ordinal.\n\t\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\t\tlet tmpViewsToInitialize = [];\n\t\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\t\tif (tmpView.options.AutoInitialize)\n\t\t\t\t{\n\t\t\t\t\ttmpViewsToInitialize.push(tmpView);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Sort the views by their priority\n\t\t\t// If they are all the default priority 0, it will end up being add order due to JSON Object Property Key order stuff\n\t\t\ttmpViewsToInitialize.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\t\tfor (let i = 0; i < tmpViewsToInitialize.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpView = tmpViewsToInitialize[i];\n\t\t\t\ttmpAnticipate.anticipate(tmpView.initializeAsync.bind(tmpView));\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\tif (this.options.AutoSolveAfterInitialize)\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} auto solving (asynchronously) after initialization...`);\n\t\t\t\t}\n\t\t\t\ttmpAnticipate.anticipate(this.solveAsync.bind(this));\n\t\t\t}\n\n\t\t\tif (this.options.AutoRenderMainViewportViewAfterInitialize)\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} auto rendering (asynchronously) after initialization...`);\n\t\t\t\t}\n\t\t\t\ttmpAnticipate.anticipate(this.renderMainViewportAsync.bind(this));\n\t\t\t}\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.fable.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallBack();\n\t\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal Data From All Views              */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onBeforeMarshalFromViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewsAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromViews();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onMarshalFromViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewsAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromViews();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} executing marshalFromViews() function...`)\n\t\t}\n\t\tthis.onBeforeMarshalFromViews();\n\t\t// Now walk through any loaded views and initialize them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToMarshalFromViews = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\ttmpViewsToMarshalFromViews.push(tmpView);\n\t\t}\n\t\tfor (let i = 0; i < tmpViewsToMarshalFromViews.length; i++)\n\t\t{\n\t\t\ttmpViewsToMarshalFromViews[i].marshalFromView();\n\t\t}\n\t\tthis.onMarshalFromViews();\n\t\tthis.onAfterMarshalFromViews();\n\t\tthis.lastMarshalFromViewsTimestamp = this.fable.log.getTimeStamp();\n\t\treturn true;\n\t}\n\tmarshalFromViewsAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.fable.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewsAsync.bind(this));\n\t\t// Walk through any loaded views and marshalFromViews them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToMarshalFromViews = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\ttmpViewsToMarshalFromViews.push(tmpView);\n\t\t}\n\t\tfor (let i = 0; i < tmpViewsToMarshalFromViews.length; i++)\n\t\t{\n\t\t\ttmpAnticipate.anticipate(tmpViewsToMarshalFromViews[i].marshalFromViewAsync.bind(tmpViewsToMarshalFromViews[i]));\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewsAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewsAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewsAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewsTimestamp = this.fable.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onAfterMarshalFromViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewsAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromViews();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal Data To All Views                */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onBeforeMarshalToViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewsAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToViews();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onMarshalToViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewsAsync(fCallback)\n\t{\n\t\tthis.onMarshalToViews();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} executing marshalToViews() function...`)\n\t\t}\n\t\tthis.onBeforeMarshalToViews();\n\t\t// Now walk through any loaded views and initialize them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToMarshalToViews = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\ttmpViewsToMarshalToViews.push(tmpView);\n\t\t}\n\t\tfor (let i = 0; i < tmpViewsToMarshalToViews.length; i++)\n\t\t{\n\t\t\ttmpViewsToMarshalToViews[i].marshalToView();\n\t\t}\n\t\tthis.onMarshalToViews();\n\t\tthis.onAfterMarshalToViews();\n\t\tthis.lastMarshalToViewsTimestamp = this.fable.log.getTimeStamp();\n\t\treturn true;\n\t}\n\tmarshalToViewsAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.fable.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewsAsync.bind(this));\n\t\t// Walk through any loaded views and marshalToViews them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToMarshalToViews = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\ttmpViewsToMarshalToViews.push(tmpView);\n\t\t}\n\t\tfor (let i = 0; i < tmpViewsToMarshalToViews.length; i++)\n\t\t{\n\t\t\ttmpAnticipate.anticipate(tmpViewsToMarshalToViews[i].marshalToViewAsync.bind(tmpViewsToMarshalToViews[i]));\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewsAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewsAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewsAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewsTimestamp = this.fable.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onAfterMarshalToViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewsAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToViews();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Render View                              */\n\t/* -------------------------------------------------------------------------- */\n\trender(pViewIdentifier, pRenderableHash, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpViewIdentifier = (typeof(pViewIdentifier) === 'undefined') ? this.options.MainViewportViewIdentifier : pViewIdentifier;\n\t\tlet tmpRenderableHash = (typeof(pRenderableHash) === 'undefined') ? this.options.MainViewportRenderableHash : pRenderableHash;\n\t\tlet tmpRenderDestinationAddress = (typeof(pRenderDestinationAddress) === 'undefined') ? this.options.MainViewportDestinationAddress : pRenderDestinationAddress;\n\t\tlet tmpTemplateDataAddress = (typeof(pTemplateDataAddress) === 'undefined') ? this.options.MainViewportDefaultDataAddress : pTemplateDataAddress;\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} VIEW Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpTemplateDataAddress}] render:`);\n\t\t}\n\n\t\t// Now get the view (by hash) from the loaded views\n\t\tlet tmpView = (typeof (tmpViewIdentifier) === 'string') ? this.servicesMap.PictView[tmpViewIdentifier] : false;\n\t\tif (!tmpView)\n\t\t{\n\t\t\tthis.log.error(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} could not render from View ${tmpViewIdentifier} because it is not a valid view.`);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn tmpView.render(tmpRenderableHash, tmpRenderDestinationAddress, tmpTemplateDataAddress);\n\t}\n\trenderMainViewport()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderMainViewport:`);\n\t\t}\n\n\t\treturn this.render(this.options.MainViewportViewIdentifier, this.options.MainViewportRenderableHash, this.options.MainViewportDestinationAddress, this.options.MainViewportDefaultDataAddress);\n\t}\n\n\trenderAsync(pViewIdentifier, pRenderableHash, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpViewIdentifier = (typeof(pViewIdentifier) === 'undefined') ? this.options.MainViewportViewIdentifier : pViewIdentifier;\n\t\tlet tmpRenderableHash = (typeof(pRenderableHash) === 'undefined') ? this.options.MainViewportRenderableHash : pRenderableHash;\n\t\tlet tmpRenderDestinationAddress = (typeof(pRenderDestinationAddress) === 'undefined') ? this.options.MainViewportDestinationAddress : pRenderDestinationAddress;\n\t\tlet tmpTemplateDataAddress = (typeof(pTemplateDataAddress) === 'undefined') ? this.options.MainViewportDefaultDataAddress : pTemplateDataAddress;\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} VIEW Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpTemplateDataAddress}] renderAsync:`);\n\t\t}\n\n\t\tlet tmpView = (typeof (tmpViewIdentifier) === 'string') ? this.servicesMap.PictView[tmpViewIdentifier] : false;\n\t\tif (!tmpView)\n\t\t{\n\t\t\tlet tmpErrorMessage = `PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} could not asynchronously render from View ${tmpViewIdentifier} because it is not a valid view.`;\n\t\t\tif (this.pict.LogNoisiness > 3)\n\t\t\t{\n\t\t\t\tthis.log.error(tmpErrorMessage);\n\t\t\t}\n\t\t\treturn fCallback(new Error(tmpErrorMessage));\n\t\t}\n\n\t\treturn tmpView.renderAsync(tmpRenderableHash, tmpRenderDestinationAddress, tmpTemplateDataAddress, fCallback);\n\t}\n\trenderMainViewportAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderMainViewportAsync:`);\n\t\t}\n\n\t\treturn this.renderAsync(this.options.MainViewportViewIdentifier, this.options.MainViewportRenderableHash, this.options.MainViewportDestinationAddress, this.options.MainViewportDefaultDataAddress, fCallback);\n\t}\n}\n\nmodule.exports = PictApplication;\n},{\"fable-serviceproviderbase\":1}]},{},[2])(2)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","const libFableServiceBase = require('fable-serviceproviderbase')\n\nconst defaultPictSettings = (\n\t{\n\t\tName: 'DefaultPictApplication',\n\n\t\t// The main \"viewport\" is the view that is used to host our application\n\t\tMainViewportViewIdentifier: 'Default-View',\n\t\tMainViewportRenderableHash: false,\n\t\tMainViewportDestinationAddress: false,\n\t\tMainViewportDefaultDataAddress: false,\n\n\t\t// Whether or not we should automatically render the main viewport after we initialize the pict application\n\t\tAutoSolveAfterInitialize: true,\n\t\tAutoRenderMainViewportViewAfterInitialize: true,\n\n\t\tManifests: {},\n\t\t// The prefix to prepend on all template destination hashes\n\t\tIdentifierAddressPrefix: 'PICT-'\n\t});\n\nclass PictApplication extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tthis.serviceType = 'PictApplication';\n\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict state\n\t\tthis.AppData = this.fable.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastMarshalFromViewsTimestamp = false;\n\t\tthis.lastMarshalToViewsTimestamp = false;\n\n\t\t// Load all the manifests for the application\n\t\tlet tmpManifestKeys = Object.keys(this.options.Manifests);\n\t\tif (tmpManifestKeys.length > 0)\n\t\t{\n\t\t\tfor (let i = 0; i < tmpManifestKeys.length; i++)\n\t\t\t{\n\t\t\t\t// Load each manifest\n\t\t\t\tlet tmpManifestKey = tmpManifestKeys[i];\n\t\t\t\tthis.fable.instantiateServiceProvider('Manifest', this.options.Manifests[tmpManifestKey], tmpManifestKey);\n\t\t\t}\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Solve All Views                          */\n\t/* -------------------------------------------------------------------------- */\n\tonPreSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onPreSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonPreSolveAsync(fCallback)\n\t{\n\t\tthis.onPreSolve();\n\t\treturn fCallback();\n\t}\n\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} executing solve() function...`)\n\t\t}\n\n\t\t// Walk through any loaded providers and solve them as well.\n\t\tlet tmpLoadedProviders = Object.keys(this.pict.providers);\n\t\tlet tmpProvidersToSolve = [];\n\t\tfor (let i = 0; i < tmpLoadedProviders.length; i++)\n\t\t{\n\t\t\tlet tmpProvider = this.pict.providers[tmpLoadedProviders[i]];\n\t\t\tif (tmpProvider.options.AutoSolveWithApp)\n\t\t\t{\n\t\t\t\ttmpProvidersToSolve.push(tmpProvider);\n\t\t\t}\n\t\t}\n\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\ttmpProvidersToSolve.sort((a, b) => { return a.options.AutoSolveOrdinal - b.options.AutoSolveOrdinal; });\n\t\tfor (let i = 0; i < tmpProvidersToSolve.length; i++)\n\t\t{\n\t\t\ttmpProvidersToSolve[i].solve(tmpProvidersToSolve[i]);\n\t\t}\n\n\t\tthis.onBeforeSolve();\n\t\t// Now walk through any loaded views and initialize them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToSolve = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\tif (tmpView.options.AutoInitialize)\n\t\t\t{\n\t\t\t\ttmpViewsToSolve.push(tmpView);\n\t\t\t}\n\t\t}\n\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\ttmpViewsToSolve.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\tfor (let i = 0; i < tmpViewsToSolve.length; i++)\n\t\t{\n\t\t\ttmpViewsToSolve[i].solve();\n\t\t}\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.fable.log.getTimeStamp();\n\t\treturn true;\n\t}\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.fable.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\n\t\t// Walk through any loaded providers and solve them as well.\n\t\tlet tmpLoadedProviders = Object.keys(this.pict.providers);\n\t\tlet tmpProvidersToSolve = [];\n\t\tfor (let i = 0; i < tmpLoadedProviders.length; i++)\n\t\t{\n\t\t\tlet tmpProvider = this.pict.providers[tmpLoadedProviders[i]];\n\t\t\tif (tmpProvider.options.AutoSolveWithApp)\n\t\t\t{\n\t\t\t\ttmpProvidersToSolve.push(tmpProvider);\n\t\t\t}\n\t\t}\n\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\ttmpProvidersToSolve.sort((a, b) => { return a.options.AutoSolveOrdinal - b.options.AutoSolveOrdinal; });\n\t\tfor (let i = 0; i < tmpProvidersToSolve.length; i++)\n\t\t{\n\t\t\ttmpAnticipate.anticipate(tmpProvidersToSolve[i].solveAsync.bind(tmpProvidersToSolve[i]));\n\t\t}\n\n\t\t// Walk through any loaded views and solve them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToSolve = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\tif (tmpView.options.AutoSolveWithApp)\n\t\t\t{\n\t\t\t\ttmpViewsToSolve.push(tmpView);\n\t\t\t}\n\t\t}\n\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\ttmpViewsToSolve.sort((a, b) => { return a.options.AutoSolveOrdinal - b.options.AutoSolveOrdinal; });\n\t\tfor (let i = 0; i < tmpViewsToSolve.length; i++)\n\t\t{\n\t\t\ttmpAnticipate.anticipate(tmpViewsToSolve[i].solveAsync.bind(tmpViewsToSolve[i]));\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.fable.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Initialize Application                   */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\n\t\t\t// Walk through any loaded providers and initialize them as well.\n\t\t\tlet tmpLoadedProviders = Object.keys(this.pict.providers);\n\t\t\tlet tmpProvidersToInitialize = [];\n\t\t\tfor (let i = 0; i < tmpLoadedProviders.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpProvider = this.pict.providers[tmpLoadedProviders[i]];\n\t\t\t\tif (tmpProvider.options.AutoInitialize)\n\t\t\t\t{\n\t\t\t\t\ttmpProvidersToInitialize.push(tmpProvider);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\t\ttmpProvidersToInitialize.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\t\tfor (let i = 0; i < tmpProvidersToInitialize.length; i++)\n\t\t\t{\n\t\t\t\ttmpProvidersToInitialize[i].initialize();\n\t\t\t}\n\n\t\t\t// Now walk through any loaded views and initialize them as well.\n\t\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\t\tlet tmpViewsToInitialize = [];\n\t\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\t\tif (tmpView.options.AutoInitialize)\n\t\t\t\t{\n\t\t\t\t\ttmpViewsToInitialize.push(tmpView);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\t\ttmpViewsToInitialize.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\t\tfor (let i = 0; i < tmpViewsToInitialize.length; i++)\n\t\t\t{\n\t\t\t\ttmpViewsToInitialize[i].initialize();\n\t\t\t}\n\n\t\t\tthis.onAfterInitialize();\n\t\t\tif (this.options.AutoSolveAfterInitialize)\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} auto solving after initialization...`);\n\t\t\t\t}\n\t\t\t\t// Solve the template synchronously\n\t\t\t\tthis.solve();\n\t\t\t}\n\t\t\t// Now check and see if we should automatically render as well\n\t\t\tif (this.options.AutoRenderMainViewportViewAfterInitialize)\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} auto rendering after initialization...`);\n\t\t\t\t}\n\t\t\t\t// Render the template synchronously\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\tthis.initializeTimestamp = this.fable.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallBack)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.fable.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 3)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\n\t\t\t// Walk through any loaded providers and solve them as well.\n\t\t\tlet tmpLoadedProviders = Object.keys(this.pict.providers);\n\t\t\tlet tmpProvidersToInitialize = [];\n\t\t\tfor (let i = 0; i < tmpLoadedProviders.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpProvider = this.pict.providers[tmpLoadedProviders[i]];\n\t\t\t\tif (tmpProvider.options.AutoInitialize)\n\t\t\t\t{\n\t\t\t\t\ttmpProvidersToInitialize.push(tmpProvider);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Sort the views by their priority (if they are all priority 0, it will end up being add order due to JSON Object Property Key order stuff)\n\t\t\ttmpProvidersToInitialize.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\t\tfor (let i = 0; i < tmpProvidersToInitialize.length; i++)\n\t\t\t{\n\t\t\t\ttmpAnticipate.anticipate(tmpProvidersToInitialize[i].initializeAsync.bind(tmpProvidersToInitialize[i]));\n\t\t\t}\n\n\t\t\t// Now walk through any loaded views and initialize them as well.\n\t\t\t// TODO: Some optimization cleverness could be gained by grouping them into a parallelized async operation, by ordinal.\n\t\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\t\tlet tmpViewsToInitialize = [];\n\t\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\t\tif (tmpView.options.AutoInitialize)\n\t\t\t\t{\n\t\t\t\t\ttmpViewsToInitialize.push(tmpView);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Sort the views by their priority\n\t\t\t// If they are all the default priority 0, it will end up being add order due to JSON Object Property Key order stuff\n\t\t\ttmpViewsToInitialize.sort((a, b) => { return a.options.AutoInitializeOrdinal - b.options.AutoInitializeOrdinal; });\n\t\t\tfor (let i = 0; i < tmpViewsToInitialize.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpView = tmpViewsToInitialize[i];\n\t\t\t\ttmpAnticipate.anticipate(tmpView.initializeAsync.bind(tmpView));\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\tif (this.options.AutoSolveAfterInitialize)\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} auto solving (asynchronously) after initialization...`);\n\t\t\t\t}\n\t\t\t\ttmpAnticipate.anticipate(this.solveAsync.bind(this));\n\t\t\t}\n\n\t\t\tif (this.options.AutoRenderMainViewportViewAfterInitialize)\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} auto rendering (asynchronously) after initialization...`);\n\t\t\t\t}\n\t\t\t\ttmpAnticipate.anticipate(this.renderMainViewportAsync.bind(this));\n\t\t\t}\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.fable.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallBack();\n\t\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal Data From All Views              */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onBeforeMarshalFromViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewsAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromViews();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onMarshalFromViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewsAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromViews();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} executing marshalFromViews() function...`)\n\t\t}\n\t\tthis.onBeforeMarshalFromViews();\n\t\t// Now walk through any loaded views and initialize them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToMarshalFromViews = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\ttmpViewsToMarshalFromViews.push(tmpView);\n\t\t}\n\t\tfor (let i = 0; i < tmpViewsToMarshalFromViews.length; i++)\n\t\t{\n\t\t\ttmpViewsToMarshalFromViews[i].marshalFromView();\n\t\t}\n\t\tthis.onMarshalFromViews();\n\t\tthis.onAfterMarshalFromViews();\n\t\tthis.lastMarshalFromViewsTimestamp = this.fable.log.getTimeStamp();\n\t\treturn true;\n\t}\n\tmarshalFromViewsAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.fable.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewsAsync.bind(this));\n\t\t// Walk through any loaded views and marshalFromViews them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToMarshalFromViews = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\ttmpViewsToMarshalFromViews.push(tmpView);\n\t\t}\n\t\tfor (let i = 0; i < tmpViewsToMarshalFromViews.length; i++)\n\t\t{\n\t\t\ttmpAnticipate.anticipate(tmpViewsToMarshalFromViews[i].marshalFromViewAsync.bind(tmpViewsToMarshalFromViews[i]));\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewsAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewsAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewsAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewsTimestamp = this.fable.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onAfterMarshalFromViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewsAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromViews();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal Data To All Views                */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onBeforeMarshalToViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewsAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToViews();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onMarshalToViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewsAsync(fCallback)\n\t{\n\t\tthis.onMarshalToViews();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} executing marshalToViews() function...`)\n\t\t}\n\t\tthis.onBeforeMarshalToViews();\n\t\t// Now walk through any loaded views and initialize them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToMarshalToViews = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\ttmpViewsToMarshalToViews.push(tmpView);\n\t\t}\n\t\tfor (let i = 0; i < tmpViewsToMarshalToViews.length; i++)\n\t\t{\n\t\t\ttmpViewsToMarshalToViews[i].marshalToView();\n\t\t}\n\t\tthis.onMarshalToViews();\n\t\tthis.onAfterMarshalToViews();\n\t\tthis.lastMarshalToViewsTimestamp = this.fable.log.getTimeStamp();\n\t\treturn true;\n\t}\n\tmarshalToViewsAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.fable.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewsAsync.bind(this));\n\t\t// Walk through any loaded views and marshalToViews them as well.\n\t\tlet tmpLoadedViews = Object.keys(this.pict.views);\n\t\tlet tmpViewsToMarshalToViews = [];\n\t\tfor (let i = 0; i < tmpLoadedViews.length; i++)\n\t\t{\n\t\t\tlet tmpView = this.pict.views[tmpLoadedViews[i]];\n\t\t\ttmpViewsToMarshalToViews.push(tmpView);\n\t\t}\n\t\tfor (let i = 0; i < tmpViewsToMarshalToViews.length; i++)\n\t\t{\n\t\t\ttmpAnticipate.anticipate(tmpViewsToMarshalToViews[i].marshalToViewAsync.bind(tmpViewsToMarshalToViews[i]));\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewsAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewsAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewsAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewsTimestamp = this.fable.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToViews()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} onAfterMarshalToViews:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewsAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToViews();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Render View                              */\n\t/* -------------------------------------------------------------------------- */\n\trender(pViewIdentifier, pRenderableHash, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpViewIdentifier = (typeof(pViewIdentifier) === 'undefined') ? this.options.MainViewportViewIdentifier : pViewIdentifier;\n\t\tlet tmpRenderableHash = (typeof(pRenderableHash) === 'undefined') ? this.options.MainViewportRenderableHash : pRenderableHash;\n\t\tlet tmpRenderDestinationAddress = (typeof(pRenderDestinationAddress) === 'undefined') ? this.options.MainViewportDestinationAddress : pRenderDestinationAddress;\n\t\tlet tmpTemplateDataAddress = (typeof(pTemplateDataAddress) === 'undefined') ? this.options.MainViewportDefaultDataAddress : pTemplateDataAddress;\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} VIEW Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpTemplateDataAddress}] render:`);\n\t\t}\n\n\t\t// Now get the view (by hash) from the loaded views\n\t\tlet tmpView = (typeof (tmpViewIdentifier) === 'string') ? this.servicesMap.PictView[tmpViewIdentifier] : false;\n\t\tif (!tmpView)\n\t\t{\n\t\t\tthis.log.error(`PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} could not render from View ${tmpViewIdentifier} because it is not a valid view.`);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn tmpView.render(tmpRenderableHash, tmpRenderDestinationAddress, tmpTemplateDataAddress);\n\t}\n\trenderMainViewport()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderMainViewport:`);\n\t\t}\n\n\t\treturn this.render(this.options.MainViewportViewIdentifier, this.options.MainViewportRenderableHash, this.options.MainViewportDestinationAddress, this.options.MainViewportDefaultDataAddress);\n\t}\n\n\trenderAsync(pViewIdentifier, pRenderableHash, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpViewIdentifier = (typeof(pViewIdentifier) === 'undefined') ? this.options.MainViewportViewIdentifier : pViewIdentifier;\n\t\tlet tmpRenderableHash = (typeof(pRenderableHash) === 'undefined') ? this.options.MainViewportRenderableHash : pRenderableHash;\n\t\tlet tmpRenderDestinationAddress = (typeof(pRenderDestinationAddress) === 'undefined') ? this.options.MainViewportDestinationAddress : pRenderDestinationAddress;\n\t\tlet tmpTemplateDataAddress = (typeof(pTemplateDataAddress) === 'undefined') ? this.options.MainViewportDefaultDataAddress : pTemplateDataAddress;\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} VIEW Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpTemplateDataAddress}] renderAsync:`);\n\t\t}\n\n\t\tlet tmpView = (typeof (tmpViewIdentifier) === 'string') ? this.servicesMap.PictView[tmpViewIdentifier] : false;\n\t\tif (!tmpView)\n\t\t{\n\t\t\tlet tmpErrorMessage = `PictApp [${this.UUID}]::[${this.Hash}] ${this.options.Name} could not asynchronously render from View ${tmpViewIdentifier} because it is not a valid view.`;\n\t\t\tif (this.pict.LogNoisiness > 3)\n\t\t\t{\n\t\t\t\tthis.log.error(tmpErrorMessage);\n\t\t\t}\n\t\t\treturn fCallback(new Error(tmpErrorMessage));\n\t\t}\n\n\t\treturn tmpView.renderAsync(tmpRenderableHash, tmpRenderDestinationAddress, tmpTemplateDataAddress, fCallback);\n\t}\n\trenderMainViewportAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow APPLICATION [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderMainViewportAsync:`);\n\t\t}\n\n\t\treturn this.renderAsync(this.options.MainViewportViewIdentifier, this.options.MainViewportRenderableHash, this.options.MainViewportDestinationAddress, this.options.MainViewportDefaultDataAddress, fCallback);\n\t}\n}\n\nmodule.exports = PictApplication;"]}